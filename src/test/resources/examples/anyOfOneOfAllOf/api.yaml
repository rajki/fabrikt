openapi: 3.0.0
components:
  schemas:
    SimpleOneOfs:
      type: object
      properties:
        oneof_property:
          $ref: '#/components/schemas/ContainsNestedOneOf'
        primitive_oneof_property:
          $ref: '#/components/schemas/ContainsPrimitiveOneOf'

    SimpleTypeWithRequiredProps:
      type: object
      required:
        - required_int
        - required_string
      properties:
        required_string:
          type: string
        required_int:
          type: integer

    ComplexParent:
      required:
        - top_level_prop
      type: object
      allOf:
        - $ref: '#/components/schemas/ContainsNestedOneOf'
        - $ref: '#/components/schemas/ContainsNestedAnyOf'
        - $ref: '#/components/schemas/SimpleTypeWithRequiredProps'
        - type: object
          required:
            - top_level_prop
          properties:
            top_level_prop:
              type: number

    ContainsNestedOneOf:
      oneOf:
        - $ref: "#/components/schemas/FirstOneA"
        - $ref: "#/components/schemas/ComplexSecondOneA"
        - type: string
        - type: integer
    
    ContainsPrimitiveOneOf:
      oneOf:
        - type: string
        - type: integer

    ContainsNestedAnyOf:
      anyOf:
        - $ref: "#/components/schemas/FirstAnyA"
        - $ref: "#/components/schemas/SecondAnyA"

    FirstOneA:
      type: object
      properties:
        first_nested_one_of_prop:
          type: string

    ComplexSecondOneA:
      allOf:
        - $ref: '#/components/schemas/MoreNesting'

    MoreNesting:
      type: object
      required:
        - more_nested_prop_one
      properties:
        more_nested_prop_one:
          type: string

    FirstAnyA:
      type: object
      properties:
        first_nested_any_of_prop:
          type: string

    SecondAnyA:
      type: object
      properties:
        second_nested_any_of_prop:
          type: string

    FirstOneB:
      type: object
      properties:
        first_property:
          type: string

    SecondOneB:
      type: object
      properties:
        second_property:
          type: string
        third_property:
          type: string
        forth_property:
          $ref: '#/components/schemas/AnyValue'
    
    AnyValue:
      description: Tests support for https://swagger.io/docs/specification/data-models/data-types/#any
    
    OneOfAdditionalProps:
      type: object
      properties:
        second_nested_any_of_prop:
          type: string
      additionalProperties:
        oneOf:
          - $ref: '#/components/schemas/FirstOneB'
          - $ref: '#/components/schemas/SecondOneB'